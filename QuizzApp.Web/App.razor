@using Microsoft.AspNetCore.SignalR.Client;
@using QuizzApp.Share;
@using System.Threading.Channels;
@inject NavigationManager NavigationManager

<h1>QuizzApp@(quizzName is not null ? $" - {quizzName}" : "")</h1>

@if (currentQuestion is not null)
{
    <div id="question">
        <span style="padding:5px">@currentQuestion.Question</span>

        <ol>
            @for (int i = 0; i < currentQuestion.Choices.Length; i++)
            {
                var choiceIndex = i;
                var choice = currentQuestion.Choices[i];
                <li style="padding:5px;">
                    <button disabled="@(currentAnswer || !Connected)" @onclick="(() => AnswerQuestion(choiceIndex))">@choice</button>
                </li>
            }
        </ol>
    </div>
}
else
{
    <button disabled="@(!CanJoinNewQuizz)" @onclick="JoinQuizz">Join new Quizz</button>
}

<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code
{
    List<string> messages = new();

    string? quizzName;

    // The current question
    QuizzQuestion? currentQuestion;

    bool currentAnswer;
    bool inQuizz;

    // Treat the channel like a reusable TaskCompletionSource
    Channel<QuizzAnswer> answers = Channel.CreateUnbounded<QuizzAnswer>();

    TimeSpan timeoutPerQuestion;
    int totalQuestions;

    HubConnection _hubConnection = default!;

    bool CanJoinNewQuizz => Connected && !inQuizz;
    bool Connected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        var connection = new HubConnectionBuilder()
                        .WithUrl(NavigationManager.ToAbsoluteUri("/quizz"))
                        .WithAutomaticReconnect(new RetryPolicy())
                        .Build();

        // Wire up the event callbacks
        connection.On<string>(nameof(WriteMessage), WriteMessage);
        connection.On<QuizzQuestion, QuizzAnswer>(nameof(AskQuestion), AskQuestion);
        connection.On<QuizzConfiguration>(nameof(QuizzStarted), QuizzStarted);
        connection.On<QuizzCompletedEvent>(nameof(QuizzCompleted), QuizzCompleted);

        connection.Reconnecting += (ex) =>
        {
            inQuizz = false;

            WriteMessage("Connection dropped. Attempting to reconnect...");

            return Task.CompletedTask;
        };

        connection.Closed += (ex) =>
        {
            inQuizz = false;

            WriteMessage("Reconnect attempts failed. Please refresh the page to reconnect");

            return Task.CompletedTask;
        };

        connection.Reconnected += (connectionId) =>
        {
            WriteMessage("Successfully reconnected. Join a new quizz.");

            inQuizz = false;
            currentAnswer = false;
            currentQuestion = null;

            InvokeAsync(StateHasChanged);

            return Task.CompletedTask;
        };


        await connection.StartAsync();

        _hubConnection = connection;
    }

    async Task JoinQuizz()
    {
        // Join a new quizz
        quizzName = await _hubConnection.InvokeAsync<string>("JoinQuizz");

        inQuizz = true;
    }

    void AnswerQuestion(int choice)
    {
        if (!currentAnswer)
        {
            currentAnswer = true;

            // Respond to the currently pending client result (AskQuestion)
            answers.Writer.TryWrite(new QuizzAnswer { Choice = choice });
        }
    }

    void WriteMessage(string message)
    {
        messages.Add(message);

        InvokeAsync(StateHasChanged);
    }

    void QuizzStarted(QuizzConfiguration gameConfiguration)
    {
        totalQuestions = gameConfiguration.NumberOfQuestions;
        timeoutPerQuestion = TimeSpan.FromSeconds(gameConfiguration.QuestionTimeout);

        messages.Clear();
        WriteMessage($"Quizz has started. Prepare to answer {gameConfiguration.NumberOfQuestions} trivia questions!");
    }

    void QuizzCompleted(QuizzCompletedEvent @event)
    {
        inQuizz = false;
        currentAnswer = false;
        currentQuestion = null;

        messages.Clear();
        WriteMessage($"Quizz {@event.Name} is completed. Your score is {@event.Correct}/{totalQuestions}");
    }

    async Task<QuizzAnswer> AskQuestion(QuizzQuestion question)
    {
        currentAnswer = false;

        messages.Clear();

        currentQuestion = question;

        await InvokeAsync(StateHasChanged);

        using var cts = new CancellationTokenSource(timeoutPerQuestion);

        try
        {
            // Wait for the answer to be written to the channel
            return await answers.Reader.ReadAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            // We timed out waiting for an answer
            currentAnswer = true;

            if (inQuizz)
            {
                WriteMessage("Times up!");
            }

            throw;
        }
    }
}
